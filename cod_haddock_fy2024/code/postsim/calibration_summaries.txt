<<dd_version: 2>>
<!---A small document to examine how well the model is calibrated ---> 

<!---Execute this with:



if strmatch("$user","minyangWin"){
	global project_dir  "C:/Users/Min-Yang.Lee/Documents/BLAST/cod_haddock_fy2024" 
	global MRIP_root  "V:/READ-SSB-Lee-MRIP-BLAST/"
}



if strmatch("$user","minyangNix"){
	global project_dir "${myroot}/BLAST/READ-SSB-Lee-BLAST/cod_haddock_fy2024"
	global MRIP_root "${myroot}/BLAST/READ-SSB-Lee-MRIP-BLAST/" 
}

global mrip_vintage "2023_11_08"

/* setup directories */
global code_dir "${project_dir}/code"
global source_data "${project_dir}/source_data"
global working_data "${project_dir}/working_data"
global output_dir "${project_dir}/output"
global MRIP_dir  "${MRIP_root}/data_folder/main/MRIP_${mrip_vintage}"
global MRIP_raw  "${MRIP_root}/data_folder/raw"

dyndoc "${code_dir}/postsim/calibration_summaries.txt", saving(${project_dir}/calibration_summaries.html) replace


 ---> 
~~~~
<<dd_do:quietly>>
/****************************/
/****************************/
/* Haddock and Cod rec ACLs in mt*/
/****************************/
/****************************/

global haddock_mort2022=666

global hadd_recACL2022=3634
global cod_recACL2022=192


global hadd_recACL2023=610
global cod_recACL2023=192


global mrip_vintage "2023_11_08"

global hadd_recACL2024=0
global cod_recACL2024=0
<</dd_do>>
~~~~


2022 Regulations
==============================================================
The recreational sub-ACL for GoM cod is <<dd_display: %8.0fc $cod_recACL2022>> mt for FY 2022. The recreational sub-ACL for GOM haddock is <<dd_display: %8.0fc $hadd_recACL2022>> mt.

Haddock:

*    20 fish, 17"
*    Open May1-Feb 28 and April 1- April 30
*    The change from 2021 is to increase the possession limit from 15 to 20 haddock

Cod: 

*   1 fish, 22"
*   Open Sept 1-October 7 and April 1-April 14 for private anglers
*   Open Sept 1-October 7 and April 1-April 14 for the for-hire anglers



2023 Regulations
==============================================================
The recreational sub-ACL for GoM cod is <<dd_display: %8.0fc $cod_recACL2023>> mt for FY 2023. The recreational sub-ACL for GOM haddock is <<dd_display: %8.0fc $hadd_recACL2023>> mt.  Regulations were



Haddock:

*    For-Hire sector: 15 fish with an 18" minimum size.
*    Private Anglers: 10 fish with a 17" minimum size.
*    Open May1-Feb 28 and April 1- April 30. Closed for the month of March.

Cod: 

*   1 fish, 22"
*   Open Sept 1-October 31 for all anglers.





Input data
==============================================================
1. MRIP data extracted and procesed on <<dd_display: "$mrip_vintage">>. 
1.  **Monthly** catch-per-trip for cod and haddock
1.  **Monthly** catch at length for cod and haddock
1.  2023 mean numbers at age for cod and haddock from the AGEPRO projections. See next
1.  Bottomtrawl survey data from 2018-2023 to form the age-length keys.
1.  Updated economic model parameters from Carr-Harris and Steinback (forthcoming in JOCE).


Numbers-at-Age for cod and haddock
==============================================================
The last stock assessment for cod was in 2021. The first year from this projection was 2020.  The off-the shelf "harvest scenario" specifies
2020: 409.2 mt removals
2021: 523 mt removals
2022 and on: F=0.173

I've computed total removals=commercial + recreational landings + dead discards from MRIP data.  The removals that are passed to AGEPRO are
2021: 348.7mt  = 215.7mt commercial removals + 33mt rec landings +  100 mt rec dead discards
2022: 548.3mt = 375.6mt commercial removals + 57.7mt rec landings +  115 mt rec dead discards
2023: 17.62mt rec landings, 109mt rec dead discards
 
The last stock assessment for haddock was in 2022. The first year from this projection was 2022.  The off-the shelf "harvest scenario" specifies
2022: 3912 mt of removals
2023 and on: F=0.338


I've computed recreational landings, discards, and dead discards from MRIP data.  I've extracted commercial landings from CAMS. The haddock removals that are passed to AGEPRO are
2022: 3,365.8 = 2625.5mt commercial removals + 663.2mt rec landings +  77.1 mt rec dead discards
2023: 348.2mt rec landings, 110.3mt rec dead discards 



Calibration 
===============================================================

1. I'm using the number of choice occasions to calibrate the model so the simulated number of trips matches the actual.  
1. I'm using the "always on" behavior -- if an angler hits their bag limit for a species, they continue to fish but will discard any additional fish of that species, regardless of size.  For months when cod is closed, we set the possession limit to 5  and allow a small fraction of trips to retain fish.  This allows a very small number of trips to take a few cod. For months when haddock is closed, we set the possession limit to 20 fish in 2022 and 10 fish/17" in 2023. 

2. I need to think a little bit about how to handle the different regs for private and for-hire in the calibration

~~~~
<<dd_do:quietly>>
/*minyangWin is setup to connect to oracle */
if strmatch("$user","minyangWin"){
	global project_dir  "C:/Users/Min-Yang.Lee/Documents/BLAST/cod_haddock_fy2024" 
	global MRIP_root  "V:/READ-SSB-Lee-MRIP-BLAST/"
	global 	oracle_cxn  " $mysole_conn"
}

if strmatch("$user","minyangNix"){
	global project_dir "${myroot}/BLAST/READ-SSB-Lee-BLAST/cod_haddock_fy2024"
	global MRIP_root "${myroot}/BLAST/READ-SSB-Lee-MRIP-BLAST/" 
}
/* setup directories */
global code_dir "${project_dir}/code"
global source_data "${project_dir}/source_data"
global working_data "${project_dir}/working_data"
global output_dir "${project_dir}/output"
global MRIP_dir  "${MRIP_root}/data_folder/main/MRIP_${mrip_vintage}"
global MRIP_raw  "${MRIP_root}/data_folder/raw"



local my_common1 "atlanticcod"
local my_common2 "haddock"
global working_year 2023
global previous=$working_year-1
global two_years=$previous-1

global hmin2022=18
global cmin2022=22
global cmin2023=22

global lbs_per_mt=2204.62
global output_dir "${project_dir}/output"
local stub "recreational_catches_2023_calibrate"


<</dd_do>>
~~~~



The regulations for Haddock were different based on mode.

~~~~
<<dd_do>>

use "${MRIP_dir}/monthly/`my_common1'_`my_common2'_target_mode_${two_years}.dta", clear
append using "${MRIP_dir}/monthly/`my_common1'_`my_common2'_target_mode_${previous}.dta"
append using "${MRIP_dir}/monthly/`my_common1'_`my_common2'_target_mode_${working_year}.dta"
destring month, replace


qui summ month if year==$working_year
local max=r(max)

/* Use previous FY if I don't have wave 5 data yet. */
if `max'<=8{
expand 2 if year==${previous} & month>`max', gen(tag)
replace year=$working_year if tag==1 & month>`max'
}
sort year month mode

drop tag

list year month mode dtrip if mode=="Private", abbreviate(16) sepby(year)
list year month mode dtrip if mode=="ForHire", abbreviate(16) sepby(year)


gen fishing_year=year 
replace fishing_year=year-1 if month<=4 

expand 2 if fishing_year==2022 & month<=4, gen(tag)
replace fishing_year=2023 if month==4 & tag==1
replace year=2024 if month==4 & tag==1

tempfile by_mode
drop tag my_dom_id dom_id area_s
save `by_mode', replace

collapse (sum) dtrip, by(fishing_year month)
tempfile aggregate
save `aggregate'



<</dd_do>>
~~~~


~~~~
<<dd_do>>


/* use the most recent set of results that matches the stub pattern*/

local list : dir "${output_dir}" files "`stub'*"
local myfile: word count `list'
local myfile: word `myfile' of `list'

local sim_results_in "${output_dir}/`myfile'"


use "`sim_results_in'", clear

drop if month<=4
gen fishing_year=$working_year
gen year=fishing_year
gen month_of_fy=month-4
replace year=year+1 if month>=13
replace month=month-12 if month>=13

gen cod_tot_cat=cod_num_kept+cod_num_released
gen hadd_tot_cat=haddock_num_kept+haddock_num_released
sort month
order cod_tot_cat hadd_tot_cat, after(month)
format *num* %09.1gc
format *mt %06.1fc
format *tot_cat %09.1gc

gen cod_mort_mt=cod_kept_mt+cod_released_dead_mt
gen hadd_mort_mt=hadd_kept_mt+hadd_released_dead_mt




collapse (mean) cod_tot_cat-hadd_released_dead_mt cod_mort_mt hadd_mort_mt, by(fishing_year year scenario month scenario_num)
*collapse (sum) cod_tot_cat-hadd_released_dead_mt cod_mort_mt hadd_mort_mt, by(scenario scenario_num)
order total_trips cod_num_kept cod_num_released haddock_num_kept haddock_num_released 

gen str60 description=""
replace description="calibrated to 2023 total trips. For Hire Regs for Haddock" if scenario_num==1
replace description="calibrated to 2023 total trips. Private Regs for Haddock" if scenario_num==2
replace description="calibrated to 2023 total trips. Blended regs for haddock" if scenario_num==0

gen mode="Private" if scenario_num==2
replace mode="ForHire" if scenario_num==1

/*
preserve
	keep scenario_num month fishing_year month cod_num_kept total_trips cod_num_released haddock_num_kept haddock_num_released cod_kept_mt cod_mort_mt
	reshape wide cod_num_kept total_trips cod_num_released haddock_num_kept haddock_num_released cod_kept_mt cod_mort_mt, i(month fishing_year) j(scenario_num)
	tempfile wide
	save `wide'
restore
*/

foreach var of varlist choice_occasions total_trips cod_num_kept cod_num_released haddock_num_kept haddock_num_released cod_tot_cat hadd_tot_cat cod_kept_mt cod_released_mt cod_released_dead_mt hadd_kept_mt hadd_released_mt hadd_released_dead_mt cod_mort_mt hadd_mort_mt{
	rename `var' sim_`var'
}
format sim_total_trips %7.0fc

tempfile calib_results12
save `calib_results12', replace


collapse (sum) sim*, by(fishing_year year month)
gen scenario_num=0

gen str60 description=""
replace description="calibrated to 2023 total trips. For Hire Regs for Haddock" if scenario_num==1
replace description="calibrated to 2023 total trips. Private Regs for Haddock" if scenario_num==2
replace description="calibrated to 2023 total trips. Summed Private and For-Hire" if scenario_num==0
gen str10 scenario="SQ_Blend"
tempfile calib_results0
save `calib_results0', replace

<</dd_do>>
~~~~




~~~~
<<dd_do>>
use  `calib_results12', replace
sort fishing_year month mode

merge 1:1 fishing_year mode month using `by_mode'
drop if _merge==2
replace dtrip=0 if _merge==2
drop _merge



/* 
Bring in the average of the 1 and 2 scenarios.
*/


*replace dtrip=0 if dtrip==. & _merge==2
gen error=(dtrip-sim_total_trips)/dtrip
gen yield=sim_total_trips/sim_choice_occasions
egen tco=total(sim_choice_occasions)
gen needed_choice_occs=dtrip/yield

egen needed_total_co=total(needed_choice_occs)

gen needed_frac=needed_choice_occs/needed_total_co

rename dtrip actual_trips
sort fishing_year year month
format needed_frac  error yield  %05.4fc
format needed_choice_occs  needed_total_co %9.0fc
<</dd_do>>
~~~~


The results file you are using is  <<dd_display: "`myfile'">> This table has mode, my calibration target (dtrip), the simulated trips, and the error.  There are also a few other columns that I'm using to calibrate the model. 


~~~~
<<dd_do>>
list fishing_year month mode actual_trips sim_total_trips error yield needed_choice_occs  if mode=="Private", abbreviate(16) sum(actual_trips sim_total_trips needed_choice_occs ) labvar(month)
<</dd_do>>


<<dd_do:nocommands>>
list fishing_year month mode actual_trips sim_total_trips error yield needed_choice_occs  if mode=="ForHire", abbreviate(16) sum(actual_trips sim_total_trips needed_choice_occs ) labvar(month)
<</dd_do>>
~~~~





~~~~
<<dd_do:nocommands>>
use `calib_results0', replace

merge 1:1 fishing_year month using `aggregate'

gen error=(dtrip-sim_total_trips)/dtrip
gen yield=sim_total_trips/sim_choice_occasions
egen tco=total(sim_choice_occasions)
gen needed_choice_occs=dtrip/yield

egen needed_total_co=total(needed_choice_occs)

gen needed_frac=needed_choice_occs/needed_total_co

rename dtrip actual_trips
sort fishing_year year month

format needed_frac  error yield  %05.4fc
format needed_choice_occs  needed_total_co %9.0fc

keep if fishing_year==2023
list fishing_year month actual_trips sim_total_trips error yield needed_choice_occs, abbreviate(16) sum(actual_trips sim_total_trips needed_choice_occs ) labvar(month)
<</dd_do>>
~~~~








Catch Statistics for Cod  
===============================================================
Here are the cod numbers  (landings=a+b1, discards=b2) for actual and calibration results for Fishing Year <<dd_display: %4.0f $working_year>>. The model matches pretty well, with the exceptions of April and, to a lesser extent, June.  In April, although simulated catch matches actual catch numbers, the simulated April landings are too low.  The error here (11,800 fish) is approximately equal to the total error for the year (9,400 fish).  Simulated catch and discards for June (in numbers) is too low.


~~~~
<<dd_do:quietly>>
use "${MRIP_dir}/monthly/`my_common1'_landings_${working_year}.dta", clear
qui summ month
local max=r(max)

/* fill in the catch stats from the previous year */
preserve
use "${MRIP_dir}/monthly/`my_common1'_landings_${previous}.dta", clear
keep if month> `max' 
replace year=$working_year
tempfile appender
save `appender', replace
restore 

append using `appender' 

replace year=$working_year+1 if month==4
gen fishing_year=$working_year

sort year month 
merge 1:1 fishing_year month using `calib_results0'
replace year=$working_year+1 if month<=4 & year==.
replace year=$working_year if month>4 & year==.
gen sim_tot_cat_cod =sim_cod_num_kept+sim_cod_num_released

format tot_cat* a b1 b2 landings sim_tot_cat_cod sim_cod_mort_mt %10.0fc

rename tot_catch actual_cat


replace year=1 if month==0
sort fishing_year year month 

rename landings actual_landings
rename b2 actual_discards
rename sim_tot_cat_cod sim_catch
rename sim_cod_num_kept sim_landings
rename sim_cod_num_released sim_discard

<</dd_do>>
~~~~


~~~~
<<dd_do:nocommands>>
list fishing_year month actual_cat sim_catch actual_landings sim_landings  actual_discards  sim_discard  , abbreviate(16) sum(actual_cat sim_catch actual_landings sim_landings  actual_discards  sim_discard ) labvar(month)
<</dd_do>>
~~~~


Here are the cod weights (landings=a+b1, discards=b2) for actual and calibration results for Fishing Year <<dd_display: %4.0f $working_year>>.  April again is the problem month: the error here (26 mt) is larger than the total error for the year (14mt).  The model overestimates weight landed in September and October. This seems to primarily be caused by higher weights of kept fish during this time.  

~~~~
<<dd_do:quietly>>

use "${MRIP_dir}/monthly/cod_weights_${working_year}.dta", clear

qui summ month
local max=r(max)

/* fill in the stats from the previous year */
preserve
use "${MRIP_dir}/monthly/cod_weights_${previous}.dta", clear
keep if month> `max' 
replace year=$working_year
tempfile appender
save `appender', replace

restore 

append using `appender' 

replace year=$working_year+1 if month==4
gen fishing_year=$working_year

sort year month 


replace ab1weight=ab1weight/$lbs_per_mt
rename ab1weight ab1mt
replace b2weight=b2weight/$lbs_per_mt
rename b2weight b2mt


replace b2weight_dead=b2weight_dead/$lbs_per_mt


sort year month 
format ab1mt b2mt %10.2fc

merge 1:1 fishing_year month using `calib_results0'

replace year=$working_year+1 if month<=4 & year==.
replace year=$working_year if month>4 & year==.

format ab1_count b2_count sim_cod_mort_mt sim_cod_kept_mt %10.0fc
rename sim_cod_kept_mt sim_landings_mt
rename sim_cod_released_mt sim_discard_mt
rename sim_cod_mort_mt sim_mortality_mt

rename sim_cod_tot_cat sim_catch
rename sim_cod_num_kept sim_landings
rename sim_cod_num_released sim_discard

replace year=1 if month==0
sort fishing_year year month 

rename ab1mt actual_landed_mt
rename b2mt actual_discard_mt
rename b2weight_dead actual_dead_discard_mt
gen weight_per_kept=actual_landed_mt/ab1_count*$lbs_per_mt
gen weight_per_release=actual_discard_mt/b2_count*$lbs_per_mt



gen sim_weight_per_kept=sim_landings_mt/sim_landings*$lbs_per_mt
gen sim_weight_per_release=sim_discard_mt/sim_discard*$lbs_per_mt

format *mt %06.1fc
format *per* %3.2fc
<</dd_do>>
~~~~

~~~~
<<dd_do:nocommands>>
list fishing_year month actual_landed_mt sim_landings_mt actual_discard_mt actual_dead_discard_mt  sim_discard_mt sim_mortality_mt weight_per_kept sim_weight_per_kept weight_per_release sim_weight_per_release, abbreviate(16) sum(actual_landed_mt actual_discard_mt sim_landings_mt actual_dead_discard_mt sim_discard_mt sim_mortality_mt ) labvar(month)
<</dd_do>>
~~~~

~~~~
<<dd_do:quietly>>
keep if fishing_year==2023
gen actual_mortality_mt=actual_landed_mt+actual_dead_discard_mt

collapse (sum) actual_landed_mt actual_discard_mt sim_landings_mt actual_mortality_mt  sim_discard_mt sim_mortality_mt

global delta_mt=actual_mortality_mt-sim_mortality_mt

<</dd_do>>
~~~~
The actual mortality was <<dd_display: %3.1f actual_mortality[1]>>mt while model predicts <<dd_display: %3.1f sim_mortality_mt[1]>>mt of mortality.  Therefore, we need to adjust our predictions by <<dd_display: %3.1f abs($delta_mt)>>mt 
 

A few helpful MRIP statistics for Cod
===============================================================
 
 
Breakdown of MRIP A+B1's into legal (22+ inches) and sublegal (under 22 inches) sizes:

~~~~
<<dd_do:quietly>>
use "${MRIP_dir}/monthly/cod_ab1_2023.dta", clear
gen legal=l_in_bin>=$cmin2023
collapse (sum) count, by(legal month)
bysort month: egen total_landings=total(count)
keep if legal==0
rename count number_sublegal
gen prop_sublegal=number_sublegal/total_landings
sort month legal
format number_sublegal total_landings %8.0fc
format prop_sublegal %03.2fc
<</dd_do>>

<<dd_do:nocommands>>
list month number_sublegal total_landings prop_sublegal, abbreviate(16) sum(number_sublegal total_landings)
<</dd_do>>
~~~~


Previous MRIP data in April of 2023 was sparse.  Data update seems to have corrected that.


~~~~
<<dd_do:quietly>>
use "${source_data}/mrip/cod_size_class2023.dta", clear
keep if month==4
gen legal=lngcat>=$cmin2023
collapse (sum) count, by(legal month)
bysort month: egen total_landings=total(count)
keep if legal==0
rename count number_sublegal
gen pct_sublegal=number_sublegal/total_landings*100
format pct_sublegal %03.0fc
<</dd_do>>
~~~~


Here is the info from the "catch" MRIP file: April Atlantic cod. 
~~~~
<<dd_do>>
use "${MRIP_raw}/catch_20232.dta", clear
keep if common=="ATLANTIC COD" & month=="04"
order strat_id psu tot_len*  claim harvest release wp*
qui count 
local total=r(N)
qui count if wp_catch==0 
local no_svy_wgt=r(N)
local has_svy_wgts=`total'-`no_svy_wgt'
list strat_id psu_id tot_len* claim harvest release wp_int if wp_catch>0|wp_int>0, abbreviate(16)
<</dd_do>>
~~~~
There are  <<dd_display: %4.0f `total'>>  rows here and <<dd_display: %4.0f `no_svy_wgt'>> had no survey weights. All the missing survey weights have been filled in.

Here is the info from the "size" MRIP file. 
~~~~
<<dd_do>>
use "${MRIP_raw}/size_20232.dta", clear
keep if common=="ATLANTIC COD" & month=="04"
order strat_id psu l_in_bin  wgt wp*
count if wp_size==0

qui count 
local total=r(N)
qui count if wp_size==0 | wp_size==.
local no_svy_wgt=r(N)

local has_svy_wgts=`total'-`no_svy_wgt'

list strat_id psu l_in_bin  wgt wp* if wp_size>0 & wp_size~=. , abbreviate(16)
<</dd_do>>
~~~~ 
 There are  <<dd_display: %4.0f `total'>>  rows (fish that were measured) and <<dd_display: %4.0f `no_svy_wgt'>> had survey weights=0 or missing. 
 
 
 
 
Catch Statistics for Haddock  
===============================================================

Here are the haddock numbers  (landings=a+b1, discards=b2) for actual and calibration results for Fishing Year <<dd_display: %4.0f $working_year>>.  


~~~~
<<dd_do:quietly>>
use "${MRIP_dir}/monthly/`my_common2'_landings_${working_year}.dta", clear

qui summ month
local max=r(max)

/* fill in the stats from the previous year */
preserve
use "${MRIP_dir}/monthly/`my_common2'_landings_${previous}.dta", clear
keep if month> `max' 
replace year=$working_year
tempfile appender
save `appender', replace
restore 

append using `appender' 

replace year=$working_year+1 if month==4
gen fishing_year=$working_year

sort year month 


merge 1:1 fishing_year month using `calib_results0'
replace year=$working_year+1 if month<=4 & year==.
replace year=$working_year if month>4 & year==.


gen sim_tot_cat_haddock=sim_haddock_num_kept+sim_haddock_num_released

format tot_cat* a b1 b2 landings sim_tot_cat_haddock sim_hadd_mort_mt %10.0fc

replace year=1 if month==0
sort fishing_year year month 
rename tot_catch actual_cat

rename sim_tot_cat_haddock sim_catch
rename sim_haddock_num_kept sim_landings
rename sim_haddock_num_released sim_discard
rename sim_hadd_mort_mt sim_mortality_mt
rename b2 actual_discards

<</dd_do>>


<<dd_do:nocommands>>
list fishing_year month actual_cat sim_catch landings sim_landings actual_discards  sim_discard sim_mortality_mt, abbreviate(16) sum(actual_cat sim_catch landings sim_landings actual_discards  sim_discard sim_mortality_mt ) labvar(month)
<</dd_do>>
~~~~



Here are the haddock weights  (landings=a+b1, discards=b2) for actual and calibration results for Fishing Year <<dd_display: %4.0f $working_year>>.
~~~~
<<dd_do:quietly>>


use "${MRIP_dir}/monthly/haddock_weights_${working_year}.dta", clear

qui summ month
local max=r(max)

/* fill in the stats from the previous year */
preserve
use "${MRIP_dir}/monthly/haddock_weights_${previous}.dta", clear
keep if month> `max' 
replace year=$working_year
tempfile appender
save `appender', replace
restore 

append using `appender' 

replace year=$working_year+1 if month==4
gen fishing_year=$working_year

sort year month 

replace ab1weight=ab1weight/$lbs_per_mt
rename ab1weight ab1mt
replace b2weight=b2weight/$lbs_per_mt
rename b2weight b2mt

replace b2weight_dead=b2weight_dead/$lbs_per_mt


sort year month 
format ab1mt b2mt %10.2fc

merge 1:1 fishing_year month using `calib_results0'

replace year=$working_year+1 if month<=4 & year==.
replace year=$working_year if month>4 & year==.

format ab1_count b2_count sim_hadd_mort_mt sim_hadd_kept_mt %10.0fc

replace year=1 if month==0
sort fishing_year year month 


rename ab1mt actual_landed_mt
rename b2mt actual_discard_mt
rename b2weight_dead actual_dead_discard_mt

format *mt %06.1fc

rename sim_hadd_kept_mt sim_landings_mt
rename sim_hadd_released_mt sim_discard_mt
rename sim_hadd_mort_mt sim_mortality_mt

rename sim_hadd_tot_cat sim_catch
rename sim_haddock_num_kept sim_landings
rename sim_haddock_num_released sim_discard

gen weight_per_kept=actual_landed_mt/ab1_count*$lbs_per_mt
gen weight_per_release=actual_discard_mt/b2_count*$lbs_per_mt

gen sim_weight_per_kept=sim_landings_mt/sim_landings*$lbs_per_mt
gen sim_weight_per_release=sim_discard_mt/sim_discard*$lbs_per_mt

format *per* %3.2fc

<</dd_do>>


<<dd_do:nocommands>>
list fishing_year month actual_landed_mt sim_landings_mt actual_discard_mt actual_dead_discard_mt sim_discard_mt sim_mortality_mt weight_per_kept sim_weight_per_kept weight_per_release sim_weight_per_release, abbreviate(16) sum(actual_landed_mt actual_discard_mt sim_landings_mt sim_discard_mt sim_mortality_mt ) labvar(month)
<</dd_do>>
~~~~



<<dd_do:quietly>>
keep if fishing_year==2023
gen actual_haddock_mortality_mt=actual_dead_discard_mt+ actual_landed_mt
collapse (sum) actual_haddock_mortality_mt actual_landed_mt actual_discard_mt actual_dead_discard_mt sim_landings_mt sim_discard_mt sim_mortality_mt

global delta_hadd_mt=actual_haddock_mortality_mt[1]-sim_mortality_mt[1]
<</dd_do>>

The actual mortality was <<dd_display: %8.0fc actual_haddock_mortality_mt[1]>> mt while model predicts <<dd_display: %3.1f sim_mortality_mt[1]>>mt of mortality.  Therefore, we need to adjust our predictions by <<dd_display: %3.1f abs($delta_hadd_mt)>>mt 



The breakdown of MRIP A+B1's into legal (17+ inches) and sublegal (under 17 inches) is a little tricky because the limits vary by mode and I have only computed trips by mode.
~~~~
<<dd_do:quietly>>
use "${MRIP_dir}/monthly/haddock_ab1_2023.dta", clear
gen legal=l_in_bin>=$hmin2022
collapse (sum) count, by(legal month)
bysort month: egen total_landings=total(count)
keep if legal==0
rename count number_sublegal
gen prop_sublegal=number_sublegal/total_landings
sort month legal
format number_sublegal total_landings %8.0fc
format prop_sublegal %03.2fc

<</dd_do>>




<<dd_ignore>>
list month number_sublegal total_landings prop_sublegal, abbreviate(16) sum(number_sublegal total_landings)
<</dd_ignore>>
~~~~





